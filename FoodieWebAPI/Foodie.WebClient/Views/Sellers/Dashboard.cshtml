@await Html.PartialAsync("_Header_Seller")
<div class="container">
    <div id="productList" class="container-fluid">
        <h2>Danh Sách Sản Phẩm</h2>
        <div class="mb-3">
            <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm sản phẩm..." 
            />
        </div>
        <div class="row" id="products">

        </div>
    </div>

</div>
<script>
    let products =[];
    document.addEventListener('DOMContentLoaded', async () => {
        products = await fetchProducts();
        showProduct(products);
    });
    document.getElementById('searchInput').addEventListener('input', function (){
        filterProducts(products);
    });

    async function fetchProducts() {
        try {
            const email = '@Html.Raw(ViewBag.Email)';
            const pageNumber = 1;
            const pageSize = 1000;
            const token = '@Html.Raw(ViewBag.Token)';
            const response = await fetch(`http://localhost:7059/api/products/get-by-email/${email}?pageNumber=${pageNumber}&pageSize=${pageSize}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                }
            });
            if (!response.ok) {
                return [];
            }
            const data = await response.json();

            // Chuyển đổi dữ liệu thành mảng các đối tượng sản phẩm
            const productsArray = data.items.map(item => ({
                productId: item.productId,
                restaurantId: item.restaurantId,
                categoryId: item.categoryId,
                categoryName: item.categoryName,
                name: item.name,
                description: item.description,
                price: item.price,
                createAt: new Date(item.createAt), 
                upDateAt: new Date(item.upDateAt), 
                images: item.images.map(img => img.imageUrl)
            }));

            return productsArray;

        } catch (error) {
            console.error('Error fetching products:', error);
            return [];
        }
    }

    function showProduct(products) {
        const productsContainer = document.getElementById('products');
        productsContainer.innerHTML = '';

        products.forEach(product => {
            const imageUrl = product.images[0] || 'https://c8.alamy.com/comp/2EA6NCD/not-food-grade-plastic-vector-sign-isolated-not-food-safe-material-wine-glass-and-fork-symbol-2EA6NCD.jpg';

            const productCard = `
        <div class="col-md-4">
            <div class="card mb-4">
                <img 
                    src="${imageUrl}" 
                    class="card-img-top" 
                    alt="${product.name}" 
                    onerror="this.onerror=null; this.src='https://c8.alamy.com/comp/2EA6NCD/not-food-grade-plastic-vector-sign-isolated-not-food-safe-material-wine-glass-and-fork-symbol-2EA6NCD.jpg';" 
                >
                <div class="card-body">
                    <h5 class="card-title">${product.name}</h5>
                    <p class="card-text">${product.description}</p>
                    <p class="card-text"><strong>Giá: ${product.price.toLocaleString()} VND</strong></p>
                    <p class="card-text"><small>Thời gian tạo: ${new Date(product.createAt).toLocaleString()}</small></p>
                    <a href="/Sellers/EditProduct/${product.productId}" class="btn btn-primary">Edit</a>
                </div>
            </div>
        </div>
        `;
            productsContainer.innerHTML += productCard;
        });
    }

    function filterProducts(productList) {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        console.log(searchTerm);
        const filteredProducts = productList.filter(product =>
            product.name.toLowerCase().includes(searchTerm)
        );
        showProduct(filteredProducts); 
    }

</script>
<style>
    .card {
        display: flex;
        flex-direction: column; /* Đặt chiều cao cột */
        height: 100%; /* Chiều cao 100% cho mỗi card */
    }

    .card-body {
        flex-grow: 1; /* Cho phép card-body mở rộng để lấp đầy khoảng trống */
    }

    .card-img-top {
        width: 100%; /* Đặt chiều rộng 100% của thẻ cha */
        height: 200px; /* Đặt chiều cao cố định */
        object-fit: cover; /* Giữ tỉ lệ hình ảnh, cắt bớt nếu cần */
    }
</style>