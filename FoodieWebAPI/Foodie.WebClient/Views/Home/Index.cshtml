@{
    ViewData["Title"] = "Home Page";
}
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    .category-list {
        padding: 10px 0;
        overflow-x: auto; /* Thanh cuộn ngang */
        white-space: nowrap; /* Ngăn không cho các mục trong danh sách xuống dòng */
    }

    .category-item {
        display: inline-block; /* Hiển thị như khối inline để phù hợp với thanh cuộn */
        margin-right: 15px;
        padding: 10px 15px;
        background-color: #f1f1f1;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .category-item:hover {
            background-color: #e1e1e1;
        }

        .category-item.active {
            background-color: #dc3545; /* Màu nền cho danh mục được chọn */
            color: white; /* Màu chữ cho danh mục được chọn */
        }

    .product-card {
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
        transition: box-shadow 0.3s;
    }

        .product-card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Hiệu ứng đổ bóng khi hover */
        }

        .product-card img {
            max-height: 200px; /* Giới hạn chiều cao ảnh sản phẩm */
            object-fit: cover; /* Đảm bảo ảnh giữ tỷ lệ và không bị méo */
        }

    .btn-view-details {
        margin-top: 10px;
        background-color: #007bff; /* Màu nền cho nút */
        color: white; /* Màu chữ cho nút */
    }

        .btn-view-details:hover {
            background-color: #0056b3; /* Màu nền khi hover */
        }

    .pagination {
        margin: 20px 0; /* Thêm khoảng cách cho phân trang */
    }
</style>
@await Html.PartialAsync("_Header_Customer")
<div class="container">
    <div class="container-fluid">
        <div id="category-row" class="category-list d-flex"></div>
        <div id="product-row" class="row"></div>
        <div class="pagination justify-content-center" id="pagination"></div>
    </div>
</div>

<script>
    let currentPage = 1;
    const pageSize = 10; // Số sản phẩm mỗi trang

    document.addEventListener('DOMContentLoaded', function () {
        loadCategories();
    });

    async function loadCategories() {
        const apiUrl = 'http://localhost:7059/api/categories';
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const categories = await response.json();

            const categoryRow = document.getElementById('category-row');

            categories.forEach(category => {
                const categoryItem = document.createElement('div');

                categoryItem.className = 'category-item';
                categoryItem.textContent = category.categoryName;
                categoryItem.addEventListener('click', () => {
                    console.log(`Selected category: ${category.categoryName}`);
                    currentPage = 1; // Reset về trang 1 khi chọn category mới

                    // Cập nhật màu sắc cho danh mục đã chọn
                    const currentActive = document.querySelector('.category-item.active');
                    if (currentActive) {
                        currentActive.classList.remove('active');
                    }
                    categoryItem.classList.add('active');

                    loadProduct(category.categoryId); // Gọi hàm loadProduct với categoryId
                    categoryItem.scrollIntoView({ behavior: 'smooth', inline: 'nearest' });
                });
                categoryRow.appendChild(categoryItem);
            });
            if (categories.length > 0) {
                loadProduct(categories[0].categoryId); // Gọi hàm loadProduct với categoryId của danh mục đầu tiên
            }
        } catch (error) {
            console.error('There has been a problem with your fetch operation:', error);
        }
    }

    async function loadProduct(categoryId) {
        const apiUrl = `http://localhost:7059/api/products/get-page?categoryId=${categoryId}&pageNumber=${currentPage}&pageSize=${pageSize}`;
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const page = await response.json();
            const products = page.items;
            const productRow = document.getElementById('product-row');
            const pagination = document.getElementById('pagination');

            productRow.innerHTML = ''; // Xóa sản phẩm cũ
            pagination.innerHTML = ''; // Xóa phân trang cũ

            // Hiển thị sản phẩm
            if (products.length === 0) {
                productRow.innerHTML = '<p>No products available for this category.</p>';
                return;
            }

            products.forEach(product => {
                const imageUrl = product.images.length > 0 ? `/images/${product.images[0].imageUrl}` : '/images/default.jpg';
                console.log(imageUrl);
                const productCard = `
                                <div class="col-md-3">
                                    <div class="card product-card">
                                        <img src="${imageUrl}" class="card-img-top" alt="${product.name}">
                                        <div class="card-body">
                                            <h5 class="card-title">${product.name}</h5>
                                            <p class="card-text">Price: ${product.price} $</p>
                                            <a href="/products/${product.productId}" class="btn btn-view-details">View Details</a>
                                        </div>
                                    </div>
                                </div>
                            `;
                productRow.innerHTML += productCard;
            });

            // Tạo nút phân trang
            const totalPages = page.totalPages; // Giả sử API trả về tổng số trang
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement('button');
                pageButton.textContent = i;
                pageButton.className = 'btn btn-outline-primary mx-1'; // Sử dụng Bootstrap button
                pageButton.addEventListener('click', () => {
                    currentPage = i; // Cập nhật trang hiện tại
                    loadProduct(categoryId); // Tải lại sản phẩm cho category đã chọn
                });
                pagination.appendChild(pageButton);
            }
        } catch (error) {
            console.error('There has been a problem with your fetch operation:', error);
        }
    }
</script>